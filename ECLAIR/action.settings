# Fit to repo setup, and add to the ECLAIR folder

variantSubDir=
variantHeadline=
if [ -n "${VARIANT+x}" ]; then
    variantSubDir="/${VARIANT}"
    variantHeadline=" [${VARIANT}]"
fi

if [ -n "${GITLAB_CI+x}" ]; then
    ci=gitlab

    gitlabApiUrl="${CI_SERVER_PROTOCOL}://${CI_SERVER_HOST}:${CI_SERVER_PORT}/api/v4"
    # To be customized
    gitlabBotToken="${ECLAIRIT_TOKEN}"
    # To be customized
    artifactsRoot=/home/eclair-gitlab/gitlab
    repository=${CI_PROJECT_PATH}
    jobId=${CI_JOB_ID}

    case "${CI_PIPELINE_SOURCE}" in
    merge_request_event)
        event="pull_request"
        pullRequestId=${CI_MERGE_REQUEST_IID}
        pullRequestHeadRef=${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}
        pullRequestBaseRef=${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}
        pullRequestUser=${GITLAB_USER_LOGIN}
        ;;
    push | pipeline)
        event="push"
        branch=${CI_COMMIT_BRANCH}
        ;;
    *)
        echo "Unexpected event ${CI_PIPELINE_SOURCE}" >&2
        exit 1
        ;;
    esac
elif [ -n "${GITHUB_ACTION+x}" ]; then
    # Fit to repo setup, and add to the ECLAIR folder
    ci=github

    # To be customized
    artifactsRoot=/home/eclair-github/public
    repository=${GITHUB_REPOSITORY}
    jobId=${GITHUB_RUN_NUMBER}

    case "${GITHUB_REF}" in
    refs/pull/*/merge)
        event="pull_request"
        # Extract PR number from "refs/pull/<prnum>/merge"
        pullRequestId=${GITHUB_REF#refs/pull/}
        pullRequestId=${pullRequestId%/merge}
        pullRequestHeadRef=${PR_HEAD_REF}
        pullRequestBaseRef=${PR_BASE_REF}
        pullRequestUser=${PR_USER}
        ;;
    refs/heads/*)
        event="push"
        # Extract the branch name from "refs/heads/<branch>"
        branch=${GITHUB_REF#refs/heads/}
        ;;
    *)
        echo "Unexpected GITHUB_REF ${GITHUB_REF}" >&2
        exit 1
        ;;
    esac
else
    echo "Unexpected CI/CD context" >&2
    exit 1
fi

case "${event}" in
pull_request)
    subDir="${pullRequestHeadRef}_${pullRequestBaseRef}"
    jobHeadline="Repository ${repository}: ${pullRequestUser} wants to merge ${pullRequestHeadRef} into ${pullRequestBaseRef}"
    ;;
push)
    subDir="${branch}"
    jobHeadline="Repository ${repository}: branch ${branch}"
    badgeLabel="ECLAIR ${branch}${variantHeadline} #${jobId}"
    ;;
*)
    echo "Unexpected event ${event}" >&2
    exit 1
    ;;
esac

subDir="${subDir}${variantSubDir}"
jobHeadline="${jobHeadline}${variantHeadline}"

# To be customized
eclairReportUrlPrefix=https://eclairit.com:3787

artifactsDir=${artifactsRoot}/${repository}.ecdf
jobDir=${artifactsDir}/${subDir}/${jobId}
updateYml=${analysisOutputDir}/update.yml
commentJson=${analysisOutputDir}/comment.json
indexHtmlUrl=${eclairReportUrlPrefix}/fs${jobDir}/index.html
summaryTxtFile="${analysisOutputDir}/summary.txt"

esc=$(printf '\e')
cr=$(printf '\r')

open_section() {
    id=$1
    title=$2
    collapsed=$3
    echo "${esc}[0Ksection_start:$(date +%s):${id}${collapsed}${cr}${esc}[0K${esc}[1m${esc}[36m${title}${esc}[m"
}

close_section() {
    id=$1
    echo "${esc}[0Ksection_end:$(date +%s):${id}${cr}${esc}[0K"
}

summary() {
    fixedReports=
    newReports=
    unfixedReports=
    while read -r line; do
        var=${line%%: *}
        val=${line#*: }
        eval "${var}=${val}"
    done <"${updateYml}"

    cat <<EOF >"${summaryTxtFile}"
# [![ECLAIR](${eclairReportUrlPrefix}/rsrc/eclair.png)](https://www.bugseng.com/eclair) Analysis summary
${jobHeadline}

Fixed reports: ${fixedReports}

Unfixed reports: ${unfixedReports} [new: ${newReports}]

[Browse analysis](${indexHtmlUrl})
EOF

    case ${ci} in
    github)
        cat "${summaryTxtFile}" >"${GITHUB_STEP_SUMMARY}"
        ;;
    gitlab)
        open_section ECLAIR_summary "ECLAIR analysis summary" ""
        # Generate summary and print it (GitLab-specific)
        cat <<EOF
Fixed reports: ${fixedReports}
Unfixed reports: ${unfixedReports} [new: ${newReports}]
Browse analysys: ${esc}[33m${indexHtmlUrl}${esc}[m
EOF
        close_section ECLAIR_summary
        ;;
    *)
        echo "Unexpected CI/CD context" >&2
        exit 1
        ;;
    esac
}

log_file() {
    section_id=$1
    section_name=$2
    file=$3
    exit_code=$4
    if [ "${exit_code}" = 0 ]; then
        collapsed="[collapsed=true]"
    else
        collapsed=
    fi

    case ${ci} in
    github)
        echo "${section_name}"
        ;;
    gitlab)
        open_section "${section_id}" "${section_name}" "${collapsed}"
        ;;
    *)
        echo "Unexpected CI/CD context" >&2
        exit 1
        ;;
    esac

    cat "${file}"

    case ${ci} in
    github) ;;
    gitlab)
        close_section "${section_id}"
        ;;
    *) ;;
    esac
}

maybe_log_file_exit() {
    section_id=$1
    section_name=$2
    file=$3
    exit_code=$4

    case ${ci} in
    github)
        echo "${section_name}"
        ;;
    gitlab)
        open_section "${section_id}" "${section_name}" ""
        ;;
    *)
        echo "Unexpected CI/CD context" >&2
        exit 1
        ;;
    esac

    if [ "${exit_code}" != 0 ]; then
        cat "${file}"
    fi

    case ${ci} in
    github) ;;
    gitlab)
        close_section "${section_id}"
        ;;
    *) ;;
    esac
    return "${exit_code}"
}
